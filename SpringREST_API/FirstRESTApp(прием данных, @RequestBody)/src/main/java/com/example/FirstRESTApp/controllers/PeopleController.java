package com.example.FirstRESTApp.controllers;

import com.example.FirstRESTApp.models.Person;
import com.example.FirstRESTApp.services.PeopleService;
import com.example.FirstRESTApp.util.PersonErrorResponse;
import com.example.FirstRESTApp.util.PersonNotCreatedExeption;
import com.example.FirstRESTApp.util.PersonNotFoundException;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/people")
public class PeopleController {

    private final PeopleService peopleService;

    @Autowired
    public PeopleController(PeopleService peopleService) {
        this.peopleService = peopleService;
    }

    @GetMapping()
    public List<Person> takeAll() {
        return peopleService.findAll();    //Jackson вшитый в спринг веб зависимость конвертирует эти обьекты в Json
    }

    @GetMapping("/{id}")
    public Person takeOne(@PathVariable("id") int id) {
        return peopleService.findOne(id);     //Jackson конвертирует в Json
    }


    @PostMapping
    public ResponseEntity<HttpStatus> create(@RequestBody @Valid Person person,
                                             BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            //тут буем посыать грамотный и точный ви ошибки
            StringBuilder errorMessage = new StringBuilder();
            List<FieldError> errors = bindingResult
                    .getFieldErrors();
            for (FieldError error : errors) {
                errorMessage.append(error.getField()).append(" - ")
                        .append(error.getDefaultMessage()).append(";");
            }
            throw new PersonNotCreatedExeption(errorMessage.toString());
        }
        peopleService.save(person);
//отправяем ШТТП ответ с пустым теом и статусом 200
        return ResponseEntity.ok(HttpStatus.OK);
    }



    //этот метод будет ловить нужное нам исключение и возвращать клиенту необходимый джэйсон
    @ExceptionHandler
    private ResponseEntity<PersonErrorResponse> handleException(PersonNotFoundException e) {
        PersonErrorResponse response = new PersonErrorResponse("Person with this id  was not found!"
                , System.currentTimeMillis());   //это и будет преобразовано в JSON
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);   //NOT_FOUND - 404 status
    }



    //такое е искючение  тоько по повоу обавения обьекта в б
    @ExceptionHandler
    private ResponseEntity<PersonErrorResponse> handleException(PersonNotCreatedExeption e) {
        PersonErrorResponse response = new PersonErrorResponse(e.getMessage()
                , System.currentTimeMillis());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
}




// ===============начинка для чека==============
//create table Person(
//        id int generated by default as idenity primary key,
//        name varchar (100) not null
//        age int,
//        email varchar (100)
//);
//
//insert into Person (name,age,email) values ("test1", 20, "test_email1")